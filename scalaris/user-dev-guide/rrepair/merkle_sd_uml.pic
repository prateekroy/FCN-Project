# Merkle Tree Reconciliation 
# by Maik Lange, Nico Kruber

.PS
copy "sequence.pic";

# OBJEKTE
actor(U, "");
object(A,"A:RR");
placeholder_object(Dummy0); # more space
placeholder_object(AA);
placeholder_object(Dummy1); # more space
placeholder_object(Dummy2); # more space
placeholder_object(BB);
placeholder_object(Dummy3); # more space
object(B,"B:RR");
step();

#---- Step1 RC sends interval to B
message(U,A,"request_sync"); active(A);
async(); # use asynchrone messages (non-filled arrowheads)
message(A,B,"start_recon(interval I\sbA\eb)"); 
inactive(A);
active(B);

#---- Step2
sync();
create_message(B,BB,"B:RC");
async();
message(B,BB,"create_struct(I\sbA\eb)"); 
inactive(B); active(BB);
step();

comment(BB,BUILD_MERKLE,0.8 left 1.0, wid 1.7 ht 0.45 \
        "get data from DB,"\
        "create merkle tree");

message(BB,A,"continue_recon(S := {I\sbAB\eb, BranchFactor, BucketSize})");
inactive(BB);
active(A);

#---- STEP 3
sync();
create_message(A,AA,"A:RC");
async();
message(A,AA,"start_recon(S)");
inactive(A);
active(AA);
connect_to_comment(AA,BUILD_MERKLE);
step();

begin_frame(A,MT,"Loop");

comment(AA,AA_COMPRESS_HASHES,0.0 left 0.1, wid 2.01 ht 0.45 \
        "CH(cur) := compressed"\
        "hashes of current level");
message(AA,BB,"check_nodes(HashSize, CH(cur))");
inactive(AA);
active(BB);
comment(BB,BB_MISMATCHES,0.00 right 0.175, wid 1.6 ht 0.45 \
        "compare hashes,"\
        "store mismatches");
#step();
#comment(BB,MISMATCHES,0.90 left 0.6, wid 2.325 ht 0.66 \
#        "\*x\sb1\eb) leaf\sbA\eb-inner\sbB\eb, leaf\sbA\eb\moinner\sbB\eb"\
#        "\*x\sb2\eb) leaf\sbA\eb-inner\sbB\eb, leaf\sbA\eb\nminner\sbB\eb"\
#        "\*y) leaf\sbB\eb                                ");
rmessage(BB,AA,"check_nodes_response(Flags, MaxLeafs\sbB\eb)");
comment(BB,MISMATCHES,0.39 left 0.25, wid 3.2 ht 0.45 \
        "\bu leaf\sbB\eb (\*y)                                               "\
        "\bu leaf\sbA\eb-inner\sbB\eb: leaf\sbA\eb\moi\sbB\eb (\*x\sb1\eb), leaf\sbA\eb\nmi\sbB\eb (\*x\sb2\eb)");
active(AA);
step();
comment(AA,AA_MISMATCHES,0.00 left 0.175, wid 1.8 ht 0.625 \
        "calc. new HashSize,"\
        "interpret Flags,"\
        "store mismatches");
step();
connect_to_comment(AA,MISMATCHES);
step();
#step();
#step();

end_frame(B, MT);
inactive(AA);
step();

comment(BB,BB_RESOLVE1,-0.09 right 0.175, wid 1.4 ht 0.225 \
        "\*d\sb1\eb := \*D \mo \*x\sb1\eb");
message(BB,B,"request_resolve(\*d\sb1\eb)");
active(B);
message(BB,AA,"resolve_req(CKV(\*y))");
inactive(BB);
active(AA);
begin_frame(B,F,"key_upd_s");
end_frame(B,F);
comment(AA,AA_RESOLVE1A,0.00 right 0.175, wid 2.6 ht 0.45 \
        "\*d\sb2\eb := \*D \ Reg(A,B) \mo CKV(\*y)"\
        "\*d\sb3\eb := Reg(A,B) \mo CKV(\*y)     ");
message(AA,A,"request_resolve(\*d\sb2\eb)");
inactive(B);
active(A);
step();
comment(AA,AA_RESOLVE1B,0.20 left 0.175, wid 1.65 ht 0.45 \
        "get list(key-value)"\
        "from leaf\sbA\eb \mo \*x\sb2\eb");
begin_frame(A,F,"key_upd_s");
end_frame(A,F);
message(AA,BB,"resolve_req(CKV(\*x\sb2\eb), CK(\*d\sb3\eb))");
inactive(A);
inactive(AA); active(BB);
comment(BB,BB_RESOLVE2,0.0 right 0.175, wid 2.45 ht 0.45 \
        "\*d\sb4\eb := \*D \ Reg(B,A) \mo CKV(\*x\sb2\eb)"\
        "\*d\sb5\eb := Reg(B,A) \mo CKV(\*x\sb2\eb)     ");
step();
comment(BB,RESOLVE_CK,0.8 left 0.75, wid 2.25 ht 0.225 \
        "decode compressed keys");
message(BB,B,"request_resolve(\*d\sb3,4\eb)");
active(B);
message(BB,AA,"resolve_req(CK(\*d\sb5\eb))");
active(AA);
complete(BB);
drawx(BB);
begin_frame(B,F,"key_upd_s");
end_frame(B,F);
connect_to_comment(AA,RESOLVE_CK);
step();
inactive(B);
message(AA,A,"request_resolve(\*d\sb5\eb)");
active(A);
complete(AA);
drawx(AA);
step();
begin_frame(A,F,"key_upd_s");
end_frame(A,F);
step();
inactive(A);

# Complete the lifelines
step();
complete(A);
complete(B);
complete(U);
.PE
